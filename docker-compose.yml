version: '3.8'

services:
  # Next.js Application
  linkedin-extractor:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
        - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
        - JWT_SECRET=${JWT_SECRET}
    container_name: linkedin-extractor-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - JWT_SECRET=${JWT_SECRET}
    restart: unless-stopped
    networks:
      - linkedin-extractor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Optional - for local development)
  postgres:
    image: postgres:15-alpine
    container_name: linkedin-extractor-db
    environment:
      - POSTGRES_DB=linkedin_extractor
      - POSTGRES_USER=linkedin_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-linkedin_password_2024}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - linkedin-extractor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U linkedin_user -d linkedin_extractor"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (Optional - for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: linkedin-extractor-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-linkedin_redis_2024}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - linkedin-extractor-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: linkedin-extractor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - linkedin-extractor
    restart: unless-stopped
    networks:
      - linkedin-extractor-network

networks:
  linkedin-extractor-network:
    driver: bridge
    name: linkedin-extractor-network

volumes:
  postgres_data:
    driver: local
    name: linkedin-extractor-postgres-data
  redis_data:
    driver: local
    name: linkedin-extractor-redis-data