name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  
jobs:
  # Code Quality Checks
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npm run typecheck
    
    - name: Run tests
      run: npm run test
      env:
        NODE_ENV: test
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

  # Build Check
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
    
    - name: Check build size
      run: |
        echo "Build completed successfully"
        ls -la .next/
        du -sh .next/

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment Preview (for dev branch)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-check]
    if: github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Vercel Preview
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'üöÄ Preview deployment is ready! Check out the changes at the provided Vercel URL.'
          })

  # Production Deployment (for main branch)
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-check, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.VERCEL_ORG_ID }}
    
    - name: Run post-deployment health check
      run: |
        sleep 30
        curl -f ${{ secrets.NEXT_PUBLIC_APP_URL }}/api/health || exit 1
    
    - name: Notify deployment success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            description: 'Production deployment successful',
            context: 'vercel-production'
          })

  # Extension Packaging
  package-extension:
    name: Package Chrome Extension
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Package Chrome Extension
      run: |
        cd extension
        zip -r ../linkedin-extractor-extension.zip .
        cd ..
    
    - name: Upload Extension Artifact
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension
        path: linkedin-extractor-extension.zip
        retention-days: 30

  # Database Migration Check
  database-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check SQL files syntax
      run: |
        echo "Checking SQL file syntax..."
        for file in database/*.sql; do
          if [ -f "$file" ]; then
            echo "Checking $file"
            # Basic SQL syntax validation could be added here
            # For now, just ensure files exist and are readable
            cat "$file" > /dev/null
          fi
        done
        echo "SQL files check completed"

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-production, package-extension]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "‚úÖ Production deployment completed successfully!"
        echo "üöÄ Application is now live at: ${{ secrets.NEXT_PUBLIC_APP_URL }}"
        echo "üì¶ Chrome extension packaged and available for download"
    
    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Please check the logs and fix any issues."
        exit 1